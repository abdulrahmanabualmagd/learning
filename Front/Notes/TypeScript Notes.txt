[Development Enviroment Installation] 
      - install node.js 
            - npm i -g typescript         // installing typescript compiler 
                  - to verify the installation write tsc -v 

[Standard Directory Structure]
      
      -------------------------
      project-root/
            |-- src/                            // Store all the .ts files                  
            |   |-- app/
            |   |   |-- controllers/
            |   |   |-- models/
            |   |   |-- services/
            |   |   |-- utils/
            |   |   |-- app.ts
            |   |-- asset/                      // Contain the project assets
            |   |   |-- images/
            |   |   |-- audios/
            |-- dist/                           // store all the transpiled Typescript code into Javascript code which is responsible for running the program
            |-- node_modules/
            |-- tsconfig.json                   // Typescript Compiler Configuration 
            |-- package.json
            |-- .gitignore
            |-- README.md
      -------------------------
      
[Overview]
      - We write typescript code in file with extension ts
      - Then we write tsc fileName.ts           // In this stage the transpiler (source-to-source Compiler) will check if it can be converted or not to the js code due to typescript standards
      - Then we write node fileName.js
      
[Type Inferences]
      - Variable can only have data from type that declared at the first of the code 
      - let x = 5;      => let x = '5 years'    => Error, x can hold only numbers 
      - let x;          => x = 5                => x = '5 years'  // won't show any error because the x implicitly delcared as any on the initialization
            - What happened here is type annotation (The typescript assign type to a variable because we didn't determined it)

[Built-In Type Primitives]
      - [ boolean, string, number, undefined, null, any, unknown, never, void, bigint, symbol ]
      
[Common Built-in JS Object]
      - [ Data, Error, Array, Map, Set, Regexp, Promise ]
         
[Type Shapes]
      - Means that typescript knows the methods that can be used with each variable depending on its type like strings have methods such as [toUpperCase, length, toLowerCase, and so on...]

[TsConfig.json]   => [Typescript Compiler Configuration]
      - the presence of the this file indicates that this file is the root of a typescript project (must be in the project root directory)
      - Including this file give us the ability to compile all ts files without writing them in tsc parameters in the terminal
      - Also we can determine the outDir and the SrcDir for compiling and output path for genereated js file 
      - java script can use jsconfig.json file instead, which acts almost the same but has some javascript-realted compiler flag [Enabled by Default]
      
      - [Compiler Options]
            - target                => to which version of js the transpiler will convert to like (es2017) EcmaScript Standards
            - module                => the way used for importing and export modules like (commonjs) syntax
            - strictNullChecks      => variable can only have null or undefuined values (if they are explicitly assigned those values)
            
      - [Include]
            - that determines what file the compiler applies the rules to, in this case ["**/*.ts"] means the compiler should check every single file that has a .ts extension
            
      - Setting up the configuration file for the Typescript file 
            - tsc --init                        // this will generate the tsconfig.json which containt the ts compiler configuration 
            - [rootDir] => "./src"              // Determine the Root Dir => tsc will look to that path to compile it
            - [outDir]  => "./dist"             // Determine the Out Root => tsc will generate the js code to that directory
            - [removeComments] => true          // don't emit the comments to the js file 
            - [noEmitOnError]  => true          // don't generate when there are errors in the ts file 
            - [noUnusedLocals] => true          // don't allow unused delcared variables
            - [noUnusedParameters] => true      // don't allow for not used parameters
            - [noImplicitReturns]  => true      // don't allow for implicit returns, like if we don't declare a function and under a condition it return something but in the other condition not returning something, so it implicitly return undefined, by setting this feature true we're preventing this scenario to not return undefined code ever 

      - [tsc CLI Options]
            - https://www.typescriptlang.org/docs/handbook/compiler-options.html
            
      [Depugging Ts Application in VSCode]
                  - [sourceMap] => true               // specify how each line of the ts code maps the generated js code 
                        - this going to generate index.js.map     // this is the source map, tells us how ts code map the js code for depuggers
                  - after that we go to the run and debug button in the left side and click on create a [launch.json] file 
                  - select the node.js 
                        - this is a json file that tells our code how to debug this application 
                  - after the [program] we add ["preLaunchTask":"tsc: build - tsconfig.json",]        // optional
                  - add a breakpoint on the line you want to start debug from that line 
                  - use shortcuts [F5] [F11] like visual studio
            MAKE SURE TO SET THE CMD AS THE DEFAULT PROFILE in case we ad "preLaunchTask"
            
[Options Parameters]
      - function pringName(name?: string){console.log(`${name||'Ananymous'}!`)}           // we used '?' to make the function work normally if there is no parameter Input (optional Paramater)

[Default Parameters]
      - function printName(name:string = 'ahmed'){console.log(name)}
      
[Documenting Functions]
      - Typescript recognize the javascript comment syntax
      - // single line comment
      
      - /*  
       Multiline comment */
      
      - /**       Documentation Comment
        *   Description
            @param1 paramName - description
            @param2 paramName - description
            @returns description
        */

[Arrays] 
      - let x : number[];
      - let y : number[][];
      - let z : number[][][];

[Tubles]
      - let x: [number,string] = [3, 'ahmed']
      - We cann't add extra elements to the tuples

[Rest Parameter]
      - function print(...data: string[]): void{for(let i = 0; i < data.lnegth; i++){console.log(data[i])}}

[Spread Parameter]
      - print(...data)
      - it is opposite for rest 

[Enum]
      -------------- [ Numberic Enum ]
      - enum Day {
            Saturday,         // 0
            Sunday,           // 1
            Monday,           // 2
            Tuesday,          // 3
            Wednesday,        // 4
            Thrusday = 10,    // 10
            Friday            // 11     
      }    
      - let day : Day = Day.Monday;       // Type of Day (enum) = 2
      
      --------------- [ String Enum ]
      - enum DirectionNumber { North, South, East, West }
      - enum DirectionString { North = 'NORTH', South = 'SOUTH', East = 'EAST', West = 'WEST' } // we must write the strigs explicitly

[Object]
      - let person : { name: string, age: number}     = { name: 'Ahmed', age: 25 };
      - let persons: { name: string, age: number}[]   =[{ name: 'Ahmed', age: 25 },{ name: 'Ali', age: 27 }];
      
[Types Aliases]
      [Literal Types]
      - type Color = 'Yellow' | 'Green' | 'Blue'        
            - let color : Color =                       // the color must be within the colors in type 'Color'
      - type Max = 50 | 100
            - let degree : Max =                        // the degree must be either 50 or 100 
            
      [Object Types] --------------------------------------------------------------------
            - type Person = { name: string, age: number };                    // Object
                  - let person : Person = { name: 'Ahmed', age: 25 };
      
      [Tuple Types] ---------------------------------------------------------------------
            - type Coord = [ number, number, string, number, number, string ] // Tuble
                  - let coordinate : Coord = [ 1, 2, 'N', 3, 4, 'S']    
            
      [Function Types] ------------------------------------------------------------------
            - type voidFunc = ( arg: string ) => void;
                  - let printName : voidFunc = function ( arg: string ){ console.log(arg)}
            Note: don't omit the parameter names or the parameter parenthesis around the parameter
                  - Like : type voidFunc = string => void;              // Wrong X
                  
            - We can Assign functions to variables
                  - let variable = cosole.log           // Without parenthesis (we won't invoke it)
                        - variable('ahemd')
                        
            - We can write the name of the passed function like console.log(functionName.name)  // this will print the name of the function passed to console.log
            
            - Using Function types considered as a safety for entring safe function with expected result to avoid passing undesirable function 
                  - Means that if I make a function for specefic purpose, and I want to make it do something build on the output of that function
                  - then I should create a function type and make it specified to enforce the co-worker to use it correctly and avoid errors 
            
      [Generic Types] ------------------------------------------------------------------- 
            - Allows us to write reusable and flexible code without sacrificing type safety
            - type CustomData<T> = { data:T };
                  - let myData: CustomData<number[]> = { data: [ 1, 2, 3, 4 ]};
            - we could also use object type with it like 
            - type Person = { name: string, age: number };
                  - let persons: CustomData<Person[]>;
      
      [Mapping Type]
            - Purpose is to perform transformation on existing types
            - type Person = { id: number; name: strig };          type subPerson = { [Property in keyof Person]?: Person[Property] }      
                  // [ Property i keyof Person ]      => Mapping over the properties in Person Type
                  // Person[Property]                 => Will get the datatype of the choosed property
            - type subPerson2 = { [P in keyof Person]: string }   
                  // Make all the properties string
                  
      [Conditional Type]
            - type typeName<T> = T extends string ? string : number;
            - let  x: typeName<string>;   // ~ let x: string;
            - let  x: typeName<others>;   // ~ let x: number;
      
      [Type Of Value]
            - const x = {data:'something', ...}
            - type data = typeof x
            
      [Type From Func Return]
            - const func = () => {...}
            - type data = ReturnType<typeof func>
      
      [Type From Module]
            - const data: import("../..").data
      
      
[Generic Functions] 
      - function fillarray<T>(size: number, value: T){return Array(size).fill(value);}          // returns an array with size and filled with the determined value

[Unions Types]
      
      [Defining Unions]
      - Allows us to define multiple allowed type members by seperating each type member with '|' Character
      - let ID : string | number;
            - here it's more flexible than one single type and more specific than any type
      - function double(arg : string | number){ console.log(arg))}
      
      [Narrowing]
      - function double (arg: string | number) {
      
            // this is (Narrowing) do action depend on the type of the input parameter
            // also we can call it [Type Guard]
            if (typeof arg === 'string) { // Do Something... }
            else if (typeof arg === 'number') { // Do Something... }   
      }
      
      [Inferred Union return types]
      - type User = {id: number, name: string}
      - function createUser (){ let randomChance = Math.random() >= 0.5; if(randomChance){return {id: 1, name:'ahmed'} else {return 'not found'}}}
      - let user: string | User = createUser()        // Here we inferred the return of the function as string or User object, so we don't have to manually write them
      
      [Unions and Arrays]
      - let array : (string | number)[];                // this indicates that array could be an (array of strings and numbers together) => [Union]
      - let array : [string , number][];                // this is array of Tuple (fixed length array with specified type for each index)
      - let array :  string | number [];                // this indicates that array could be a (string) or an (array of numbers)
      
      [Union with Literal Types]
      - type Color = 'Yellow' | 'Green' | 'Blue'        
            - let color : Color =                       // the color must be within the colors in type 'Color'
      - type Max = 50 | 100
            - let degree : Max =                        // the degree must be either 50 or 100
            
[Combining Techniques]        [ Unions(|) / Intersections (&) ]

      - [Union types]               => '|'
            - A variable or a function parameter have can be one of many types
            - function printNumber( num : number | string)
                  { 
                        // Narrowing Section
                        if (num ==='number') return num; 
                        else return parseInt(num)
                  }
                  
      - [Intersection Types]        => '&'      // used to combine two types
            - type person = { name:string, age:number };
            - type employee = { id:number, job:string };
            - type Engineer = person & employee & {ShowData () => void}
            - let a : Engineer = {id:1, name:'ahmed', age:25, job:'Engineer', print: function () {console.log(`${this.id}`)}}
            
[Type Guards (Narrwing)]
      
      [Type Guards]
      function formatStatistic(stat: string | number) {
        if (typeof stat ==='string')                        // checks if the stat is a string
          return stat.toUpperCase();                        // all string methods enabled inside the condition
        else if (typeof stat === 'number')                  // checks if the stat is a number
          return stat.toFixed(2);                           // all number methods enabled inside the condition
      }
      
      [Using in with type guards]
      - we use 'in' key word in the condition to check the existance of a property in the object 
      function check (sport: Tennis | Soccer)               // function that takes parameter from type Tennis or Soccer
      { 
          // it checks here if the property exists in the passed parameter
          if ('serve' in sport)                             // checks if the passed parameter object have property called 'serve'   using 'in' key work in condition
              return sport.serve();
          else if ('kick' in sport)                         // checks if the passed parameter object have property called 'kick'    using 'in' key word in condition
              return sport.kick();
      } // also we can use it with just else without putting the second condition
      
[Interface and Type]
      - difference between interface and type is that interface can only be used to type objects, while type can be used to type objects, primitives, and more
      
      - [Declaration Syntax]
            - [ Interface ] => interface Person { id: number; name: string }
            - [ Type ]      => type Person = { id: number; name: string }
            
      - [Extending / Implmentation]
            - [ Interface ] => Interface Employee extends Person { role: string; }
            - [ Type ]      => type Employee = Person & { role: string }
            
      - [ Implement / Extend ]
            - [ Interface ] => interface Printable{ print(): void }     class Document implements Printable{ print(){console.log('')} }
            - [ Type ]      => Type cannot be used to enforce that a class implements a certain structure
      
      - [ Mapped Types ]
            - [ Interface ] => syntax more verbose
            - [ Type ]      => type Employee = { [P in keyof Person]?: Person[P] }
      
      - [ Declaration Merging ]
            - [ Interface ] => Interfaces can be merged, when declaring two interfaces with the same name it will merge and combine the properties into one interface
            - [ Type ]      => Type does not support merge!
               
      - [ Compatibility ]
            - [ Interface ] => Declaration merging can be useful for extending interfaces, and interfaces are generally more comonly used when defining object shapes
            - [ Type ]      => Types are more flexible and powerful when it comes to working with union types, intersection types, and mapped types

[Interface Extends]
      - 
      
[Interface Overloads]
      - interface Expect{
            (value: boolean): string
            (value: string): boolean;
        }
      // this interface is used to represent a function taht can either take a boolean and return a string or take a string and return a boolean
      // (Overload)

 
[Class (extends / implements)]
      - Note: without specifying the access modifier for the property, It is Public by default.

      - export interface Iemployed{       // making interface, making the Importable by using export keyword
            print: ()=> void;             // Only the signature and the class must implement its body
      }
      
      - export class Person {             // making class Person, also Importable
            
            private _name: string;        // Private Properties
            private _age: number;
            
            constructor(name?:string, age?:number){   // constructor
                  this._name = name || 'N/A';         // ctor params are optional, that's mean it may have a value or be undefinded so we have to use '||' Operator to Assign value in case it was undefined
                  this._age = age || 0;
            }
            
            get Name(): string{                       // Get data using Getter, We have to use it or the private property in the top will show warrning 'It's declared but Its value never read
                  return this._name;                  // Means that It must be readable through getter or a function that print it or use it
            }
            
            get Age(): number{
                  return this._age;
            }          

            set Age(value:number){
                  this._age = value;                  // Note that, Set Accessor can not have return type annotation
            }
      }
      
      - export class Employee extends Person implements Iemployed{
            private _job: string;
            constructor(name?:string, age?: numberr, job?:string){
                  super(name, age);
                  this._job = job || 'N/A';
            }
            
            print: ()=> void = () => console.log(this._job);
            
            get Job(): string{
                  return this._job;
            }
            
            set Job(value: string){
                  this._job = value;                  // Set Accessor Can not have return type annotation
            }    
      }
      
      - [Abstract Class]
            - only can be inherited only, cannot be implemented
      
[Index Signature]
      - Note: each class or interface could have only one index signature
      - Useful when we're working with objects that have dynamic or unknown property names
      - interface DataToReceive{
            [key:string]:string;          // what ever the data is to receive from the API, as log as the key is string also the value assigned to it is string
      }
      - class DataToReceive{
            [key:string]:string;
            constructor(){
                  this.d1 = 'Abdulrahman';
                  this.d2 = 'Khaled';
                  this.a1 = 'Yousef';
                  // And so on...
            }
      }
  
  
[Non-Null Assertion operator]       =>    !
[Optional Property Acess Operator]  =>    ?
[Chaining Operator]                 =>    .
            

      
[Nullable Type]
      - function print (name : string | null | undefined){
            // here we handling the case of the name that must be string to make sure there is no crash would happen
            // null and type checks here (prevent crash for not string or no value objects)
            if (typeof name === 'string')
            {
                  // do something here if the name has a value and in string 
            }
            else
            {
                  // do something here if the name have no value or not string value 
            }
        }

[Optional Chaining]
      - type Customer = {date : Date}
      - let getCustomer : function (id : number) : Customer | null | undefined { return id === 0 ? null : {date : Date()} }
      - let customer : Customer = getCustomer(0);
            - console.log(customer?.date?.getFullYear())          // here we used nullable operator instead of making a null check condition
      ----------------------------------------------------
      - let log : any = function () : void {console.log('Hello There!')}            // here the log is a function
      - log()           // this is will work without errors 
      - log = null      // assign the log to null (not a function anymore)
      - log()           // Error! because log is not a function so to avoid this we can use the nullable chaining Access operator
            # Solution : => log?.()             // if log is not a function, this line won't be executed
            
[Decorators]
      - Allows us to add new functiuonality to [Classes, Methods, Properties, Parameters, Accessors(getters and setters)]
      
      [Decorator Factory]
            - to customize the decoration, by implementing a function that returns the expression that will be called by the decorator at runtime
            function color(value: string) {           // this is the decorator factory that accepts a string argument from the @decorator('')
              return (target: Function) => {
                  // this is the main decorator 
              };
            }
            
            - @color('argument') class className{}
      
      [Decorator Composition]
            - We can apply multiple decorator for the same target whether it was class, method, or whatevery it is
            
            - @dec1 @dec2 @dec3 class color{}         // dec3 will execute first then dec2 and so on... (nearest from class is first)
      
      [Decorator Evaluation]
            - Parameter Decorators, followed by Method, Accessor, or Property Decorators are applied for each instance/static member.
            - Parameter Decorators are applied for the constructor.
            
      [Class Decorator]
            - Note: the class decorator function must have one argument from type [Function]                       $$
            - function ClassDecorator(target: Function){//do smoething...}
                  - @ClassDecorator
                    class ClassName{//someproperties and methods}
            - // We could make it Seal the class
      
      [Method Decorator]
            - Note: the method decorator function must have three argument [ Object , string , PropertyDescriptor ] $$
                  - PropertyDescriptor is a typescript interface
            - function MethodDecorator(target: Object, methodName: string, descriptor: PropertyDescriptor){
                  originalValue = descriptor.value;                                       // we use [.value]
                  descriptor.value = () => console.log('Move Function Cancelled');        // here we changed the method implmentation
                                                                                          // this line will be executed instead of the console.log(speed)
                  originalValue.call(target,123)
            }
            - class className{
                  
                  @MethodDecorator                          // Here is the @decorator
                  move(speed:number){
                        console.log(speed);
                  }
            }
      
      [Accessor Decorator]
            - Note: the Accessor Decorator function must have three arguments [ Object, string, PropertyDescriptor ]  $$
            - function AccessorDecorator(target: Object, name: string, descriptor: PropertyDescriptor){
                  descrptor.get = () => {                   // we use [.get]
                        return 'newValue'                   // Here we changing the value of the Getter, Use Set with Setters
                  }
            }
            
            class Car{
                  private _color: string = 'red';
                  @AccessorDecorator
                  get Color():string{
                        return this._color;
                  }
            }
            
      [Property Decorator]
            - Note: the Property Decorator function must have two arguments [ Object, string ]
            - we add the value of the property inside the function [ let value: string ]              // in case we're refferring to a string property
            - we add the descriptor from type PropertyDescriptor beside the value and we set the getter and setter inside it 
            - we use Object.defineProperty(target, name, descriptor)
            function IsValid(target: Object, name: string){
                  let value: string;
                  const descriptor: PropertyDescriptor = {
                        get(){
                              return value;                       // we could add validation logics
                        },
                        set(newValue: string){
                              value = newValue;                   // we could add validation logics 
                        }
                  }
                  Object.defineProperty(target, name, dscriptor); // setting the descriptor for the method knew by its name and target
            }
            
            class Person{
                  @IsValid                                        // We invoke the decorator function 
                  name: string;
                  constructor(name: string){
                        this.name = name;                         // in this line will access the setter in the description inside the decorator function
                  }                             
            }
      
      [Parameter Decorator]
            - Note: the Parameter Decorator function must have three arguments [ Object, string, number]
            - function IndexDecorator(target: Object, name: string, index: number){                         // here we got the index of the parameter
              }                                                                                             // in this case the index is 0
            - class Person{
                  move(@IndexDecorator distance: string){
                        // do something
                  }
            }
      
      [MetaData] ---
      
[If Statements]
      - typeof                (for Primitives)              => input: number | string     => if (typeof input === 'string')   {//do something...}
      - property in object    (for Objects)                 => input: {data:'yes'}        => if (data in input)               {//do something...}      
      - instanceof            (for Classes)                 => input: number | number[]   => if (input instanceof Array)      {//do something...}      
      - type-guard functions  (narrowing for anything) like => input: number | number[]   => if (Array.isArray(input))        {//do something...}
      
[Discriminated Unions]
      - type Response = {status:200, data:any} | {status:301, to:string} | {status:400, error:Error}
            // in case 200, 301, or 400 => each one have different property next to it
      
      - const response: Response = getResponse()
      - switch(response){
            case 200: return response.data
            case 301: return redirect(response.to)
            case 400: return response.error
      }
      
[Type Assertion]
      - Description: is to make sure that the variable is as descriped
      - let text : number = (variable as string).length;
      - let text : number = (<string>variable).length;
      - function isString(value:any): value is string{return typeof value === "string";}

[Different between void and never types]
      - function logMessage(message: string): void {
            console.log(message);
        }
      - function throwError(message: string): never {
            throw new Error(message);
        }
      
      