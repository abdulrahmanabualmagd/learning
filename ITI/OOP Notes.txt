// Linear Programming
	[go to where n invention but make the code a spacitti code (very very hard to trace)]
	[repetition - maintenance - no scope - (syntactic error [assigning different value type to the variable]
	structural programming or procedural programming => came after linear programming [divide the page into two scopes (the main code / functions)]

// Y2K Problem
	Date issues due to modifying all the code to have more digits in all the code / (in general big code and places to modify any modification)

// Main Four Principle Core
	- Encapsulation
	  - Hide Data
	- Abstraction
	  - Hide Functionality's Details
	  - May merge the two concepts [encapsulation / abstraction] under (ABSTRACTION)
	- Inheritance
	  - Class inherits attributes and methods from another class
	- Polymorphism
	  - Different results with different uses

// Note: JavaScript with ES.next became Object-Oriented Programming Language.
	- All created classes by default inherit from the object class unless I make it inherit from something.

// Types of Classes
	- Concrete class
	  - The normal one that we take any class can inherit from it
	- Sealed class
	  - We can't inherit from it
	  - Must be used in the beginning of creating the project and then after implementation
	- Static class
	  - All its fields, properties, methods, and constructor must be static like Math class consists of static and const
	  - Can't create object from it, can't inherit except from static class
	- Partial class
	  - We have two classes and defined it as partial then the compiler merge both classes, this will make more than developer work on it each dev works on a different scope on the partial class
	  - Internal partial class className // use this line on separated class files
	- Nested class
	  - Class inside a class
	  - For the inner class we should create object to the outer class and then we can use its field [we can see the private field in the inner but the opposite won't work]
	  - To create an object with the inner class we should include the outer.inner
	- Abstract class
	  - We can only create objects with the abstract class just other classes can inherit from it.
	  - Parent can reference child object
	  - Child cannot reference parent [boxing - unboxing - domcasting - upcasting]
	  - Upcasting can be done implicitly (access the parent class member gut it is not possible to access all the child class members
	  - Boxing is the process of converting a value type to a reference type
	  - Unboxing is the process of converting a reference type to a value type
	  - Upcasting is the process of converting derived type to a base type
	  - Downcasting is the process of converting base type to a derived type
	- Abstract method must be inside abstract class
	  - Abstract method must be public
	  - Abstract method have by default virtual so in the derived class we use override and implement it
	  - The derived class from abstract class must have the abstract method from the base class OR we can set the derived class to abstract class
	- Interface a contract that the class must do it
	  - Any method inside the interface by default => abstract + public + virtual
	  - We can't write variable inside the interface,
	  - We can write property inside the interface just (auto-implemented property) and that's because it doesn't have implementation

// What is the Difference Between the Abstract Class and the Interface
	- Abstract class can have both abstract method and non-abstract method
	- Interface can have abstract methods / property only (auto-implemented property) added newly
	- Indexer (added newly in the interfaces)
	- Abstract class can have variables and but interfaces cannot
	- Abstract methods in abstract class can have access modifiers, interfaces by default public + abstract + virtual
	- Class can implement multiple interfaces but inherits from only one class
	  - Multiple implementation for interfaces allowed in specific logic allowed, but in C# multiple inheritance not allowed in C#
	- Abstract class used in case of inheritance
	- There is no inheritance between the class and the interface but there is a contract that the class must implement all of it

// Constructor
	Special Type Of Function because => 1- Must Named AS Class Name || 2- Don't Have Return Type
	Can't Inherit But Can Change
	Can Be Overloaded

	- Private Constructor
		Cannot create object from it

	- Static Constructor
		Called only once with first interaction with class
		Cannot have any access modifiers or parameters

	- Destructor or Finalizer
		~ClassName()
		{
		}
		Instructions for Garbage Collector before killing object in memory
		Can not be called
		Cannot have any access modifiers or parameters

// Static Members
	- Created only once in memory
	- Belongs to class only not objects
	- Shared for all objects
	- Can be accessed only by class name
	- Static Function works with only static member
	- Non-Static Function works with static and non-static member

// Class And Struct And Enum
	By Default Internal
	Class Member And Struct Members By Default Private

// Relations Between Classes:
	- Composition: Class A is main part of Class B
	- Aggregation: Class A is optional part of Class B
	- Association: Class A uses class B
	- Inheritance: Is-A relation

// Inheritance
	- Represents Is-A Relation
	- Class can inherit from one class only
	- Can have multilevel inheritance
	- Cannot have multiple inheritance
	- Class that classes inherit from: Parent, Base, Super
	- Class that inherits from other class: Child, Derived, Subclass

// Types of Classes
	1. Concrete Class
	   - User-defined class
	2. Sealed Class
	   - Cannot inherit from it
	   - Can inherit from other class
	   - Can create object
	3. Static Class
	   - Cannot create object
	   - All fields inside class
	4. Partial Class
	   - Merge two files as one class
	   - Two classes must have the same name